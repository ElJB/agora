var Alpage = require('./connector.js'),
	log = require('./log.js'),
	assert = require('assert'),
	Word = require('./word.js');

var alpage1 = new Alpage("J'adore la chanson que tu as chantée, elle n'était pas fantastique.");
var alpage2 = new Alpage("Engagée dans une certaine mesure par le consortium Agreenium, cette démarche sera approfondie grâce au projet, \
	présenté par le Gouvernement, d’un Institut agronomique et vétérinaire de France, tant dans son périmètre que dans son champ de compétences, \
	élargi.");
var alpage3 = new Alpage("Le traitement phytosanitaire pose un problème très important que quelques propositions ne peuvent suffire à résoudre.");
var alpage4 = new Alpage("Non !");
var alpage5 = new Alpage("Car comment pourra-t-on sortir valablement d’une mauvaise passe qui est aussi une impasse ?");
var alpage6 = new Alpage("Le localisme contre le productivisme, le bon sens de la réduction des intermédiaires contre la \
multiplication abusive des parties prenantes et du fret international, l’intérêt général contre la dictature des empires \
particuliers et déracinés : voilà ce qu’il faudrait vous opposer et voilà ce que crient nos campagnes si éloignées de vos \
Larzac idéologiques, toujours plus destructeurs pour la terre et les hommes !");

var word = new Word({
	lemma: "rêver",
	form: "rêvais",
	pos: "v",
	mstag: "number.sg person.1 tense.imperfect extraction.minus mode.indicative"
});

assert.equal(word.number, "sg");
assert.equal(word.tense, "imperfect");
assert.equal(word.mode, "indicative");

alpage1.parse()
	.then(function(tree){

		assert(tree);
		assert(tree.groups.length == 8);
		assert(tree.relations.length == 10);

		tree.structure();
		assert(tree.words.E1F4.parent().children());
		tree.not();

		assert.equal(tree.lemmaString(), "cln_CLN adorer_V le_DET chanson_NC que_PREL \
cln_CLN avoir_AUX chanter_V ,__ cln_CLN NOT_ne_CLNEG NOT_être_V pas_ADVNEG NOT_fantastique_ADJ .__");
	})
	.then(function(){
		return alpage2.parse();
	})
	.then(function(tree){
		assert(tree);
	})
	.then(function(){
		return alpage3.parse();
	})
	.then(function(tree){
		tree.structure();
		tree.not();

		assert.equal(tree.lemmaString(), "le_DET traitement_NC photo_NC sanitaire_ADJ \
poser_V un_DET problème_NC très_ADV importer_V que_PREL quelque_DET proposition_NC \
NOT_ne_CLNEG NOT_pouvoir_V NOT_suffire_V à_PREP résoudre_V .__");
	})
	.then(function(){
		return alpage4.parse();
	})
	.then(function(tree){
		assert(tree);

		return alpage5.parse()	
	})
	.then(function(tree){
		assert(tree);

		return alpage6.parse();
	})
	.then(function(tree){
		assert.equal(tree.lemmaString(), "");

		console.log("alpage test: OK");	
	})
	.catch(function(err){
		console.log(err.stack);
		assert(!err);
	});