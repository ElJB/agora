var Word = function(word, tree){
	this.lemma = word.lemma,
	this.pos = word.pos,
	this.tree = tree;
	if( word.group ){
		this.group = word.group;
	}
	if( word.mstag ){
		this._parseMsTag(word.mstag)
	}
}

Word.prototype._parseMsTag = function(tag){
	var self = this;

	if( !tag ){
		return;
	}

	tag.split(" ").forEach(function(subtag){
		var subtag = subtag.split(".");
		if( subtag.length > 2 ){
			return self[subtag[0]] = subtag.slice(1, subtag.length);
		}
		self[subtag[0]] = subtag[1];
	});

}

Word.prototype.parent = function(relations){
	if( !this._parent ){
		return undefined
	}

	if ( !relations || relations.indexOf(this._parent[0]) != -1 ){
		return this.tree.words[this._parent[1]];
	}
}

Word.prototype.children = function(relations){
	var self = this;

	if( !this._children ){
		return undefined
	}

	return this._children.map(function(e){
		if( !relations || relations.indexOf(e[0]) != -1 ){
			return self.tree.words[e[1]];
		}
	}).filter(function(e){
		return e;
	});
}

Word.prototype.deny = function(propagation){

	if( !this.lemma.match("NOT_") && this.lemma != "que" ){
		this.lemma = "NOT_" + this.lemma;
	}

	if( propagation ){
		var children;
		if( children = this.children(["COD-V", "MOD-N", "MOD-A", "ATB-SO", "AUX-V", "CPL-V"]) ){
			children.forEach(function(child){
				child.deny(propagation);
			});
		}
	}
}

module.exports = Word;