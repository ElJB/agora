/*
Module to parse a sentence and expose it as an object:
{ groups: 
   [ { id: 'E1G1', type: 'NV', words: [Object] },
     { id: 'E1G2', type: 'GN', words: [Object] },
     { id: 'E1G3', type: 'GN', words: [Object] },
     { id: 'E1G4', type: 'NV', words: [Object] },
     { id: 'E1G5', type: 'NV', words: [Object] },
     { id: 'E1G6', type: 'NV', words: [Object] },
     { id: 'E1G7', type: 'GA', words: [Object] } ],
  relations: 
   [ { type: 'SUJ-V', id: 'E1R3', sujet: 'E1F1', verbe: 'E1F2' },
     { type: 'SUJ-V', id: 'E1R2', sujet: 'E1F6', verbe: 'E1F7' },
     { type: 'SUJ-V', id: 'E1R1', sujet: 'E1F10', verbe: 'E1F11' },
     { type: 'AUX-V', id: 'E1R4', auxiliaire: 'E1F7', verbe: 'E1F8' },
     { type: 'COD-V', id: 'E1R6', cod: 'E1F5', verbe: 'E1F8' },
     { type: 'COD-V', id: 'E1R5', cod: 'E1F4', verbe: 'E1F2' },
     { type: 'ATB-SO',
       id: 'E1R7',
       attribut: 'E1F12',
       verbe: 'E1F11',
       's-o': undefined },
     { type: 'MOD-N', id: 'E1R8', modifieur: 'E1F8', nom: 'E1F4' },
     { type: 'JUXT', id: 'E1R9', premier: 'E1F2', suivant: 'E1F11' } ] }
*/

var http = require('http'),
	Q = require('q'),
	parseXml = require('xml2js').parseString,
	iconvIsoUtf = new require('iconv').Iconv('latin1', 'utf8');

var Word = function(word, tree){
	this.lemma = word.lemma,
	this.pos = word.pos,
	this.tree = tree;
	if( word.group ){
		this.group = word.group;
	}
}

Word.prototype.parent = function(relations){
	if( !this._parent ){
		return undefined
	}

	if ( !relations || relations.indexOf(this._parent[0]) != -1 ){
		return this.tree.words[this._parent[1]];
	}
}

Word.prototype.children = function(relations){
	var self = this;

	if( !this._children ){
		return undefined
	}

	return this._children.map(function(e){
		if( !relations || relations.indexOf(e[0]) != -1 ){
			return self.tree.words[e[1]];
		}
	}).filter(function(e){
		return e;
	});
}

Word.prototype.deny = function(propagation){


	if( !this.lemma.match("NOT_") && this.lemma != "que" ){
		this.lemma = "NOT_" + this.lemma;
	}

	if( propagation ){
		var children;
		if( children = this.children(["COD-V", "MOD-N", "MOD-A", "ATB-SO", "AUX-V", "CPL-V"]) ){
			children.forEach(function(child){
				child.deny(propagation);
			});
		}
	}

	
	
}

var ParsedTree = function(xmlTree){
	var self = this;

	this.groups = xmlTree.Document.Sentence[0].G,
	this.relations = xmlTree.Document.Sentence[0].R;
	this.words = xmlTree.Document.Sentence[0].W;

	this.groups = this.groups.map(function(e){
		var group = e.$;
		group.words = e.W.map(function(f){ return f.$ });
		return group;
	});

	this.relations = this.relations.map(function(e){
		var relation = e.$;
		var keys = Object.keys(e);
		keys.splice(keys.indexOf('$'), keys.indexOf('$') + 1);
		for( i in keys ){
			relation[keys[i]] = e[keys[i]][0].$.ref;
		}
		return relation;
	});

	this.words = {}

	if( xmlTree.Document.Sentence[0].W ){
		xmlTree.Document.Sentence[0].W.forEach(function(w){

			self.words[w.$.id] = new Word({
				lemma: w.$.lemma,
				pos: w.$.pos
			}, self);

		});
	}


	this.structure();


}

ParsedTree.prototype.structure = function(){
	var self = this;

	this.groups.forEach(function(group){
		group.words.forEach(function(word){
			self.words[word.id] = new Word({
				pos: word.pos,
				lemma: word.lemma,
				group: group.id
				//mstag: word.mstag
			}, self)
		});
	});

	var parents = ["auxiliaire", "verbe", "coordonnant", "nom", "adjectif", "adverbe", "preposition", "appose", "premier"];

	this.relations.forEach(function(relation){

		try {
			for( i in parents ){
				if( parents[i] in relation ){
					var parent = relation[parents[i]],
						parentKey = parents[i];
					break;
				}
			}

			if( !parent ){
				throw new Error("unknown parent");
			}

			var childrenKeys = Object.keys(relation).filter(function(key){
				return (["type", "id"].concat([parentKey])).indexOf(key) == -1 && relation[key];
			});

			var children = []
			childrenKeys.forEach(function(key){
				//prevent circular hierarchy
				if( relation[key] != self.words[parent]._parent ){
					children.push([relation.type, relation[key]]);
				}

				self.words[relation[key]]._parent = [relation.type, parent];
			});

			if( !self.words[parent]._children ){
				self.words[parent]._children = children;
			} else {
				self.words[parent]._children = self.words[parent]._children.concat(children);
			}
		} catch (err){
			console.log(err.stack);
			console.log(relation);
		}
		

	});

	this.groups.forEach(function(group){
		var parents = {};

		Object.keys(self.words).forEach(function(key){
			if( self.words[key].group && !parents[self.words[key].group] && self.words[key]._children ){
				parents[self.words[key].group] = key;
			}
		});

		Object.keys(self.words).forEach(function(key){
			if( !self.words[key]._parent ){
				self.words[key]._parent = ["group", parents[self.words[key].group]];
			}
		});

	});
}

ParsedTree.prototype._group = function(group){
	var self = this;

	return Object.keys(this.words).filter(function(key){
		return self.words[key].group == group;
	}).map(function(key){
		return self.words[key];
	});
}

var stateVerbs = ["Ãªtre", "rester", "devenir", "sembler"]

ParsedTree.prototype.not = function(){
	var self = this;

	Object.keys(this.words).forEach(function(key){

		if( self.words[key].pos == "clneg" ){
			self.words[key].deny();
			var verb = self.words[key].parent(["group", "MOD-V"]);
			if( verb ){
				verb.deny(true);
			}

		}

	});
}

ParsedTree.prototype.lemmaString = function(){

	var string = "",
		seed = "E1F",
		i = 1;

	while( this.words[seed + i]){
		string += this.words[seed + i].lemma + " ";
		i++;
	}

	return string.substr(0, string.length - 1);
}

var Alpage = function(sentence, maxAttempts){
	this.sentence = sentence;
	this.attempts = 0;
	this.deferred = Q.defer();
	this.maxAttempts = maxAttempts || 2;
}

Alpage.prototype.parse = function(){
	this._post();
	return this.deferred.promise;
}

Alpage.prototype._post = function(){
	var self = this;
	this.attempts += 1;
	console.log("Attempts: " + this.attempts);

	var headers = {
		Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
		"Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary29zFhZa4iaQlBZMu",
		Origin: "http://alpage.inria.fr",
		Referer: "http://alpage.inria.fr/parserdemo",
		"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36",
		"X-DevTools-Emulate-Network-Conditions-Client-Id": "78E6DC86-CCCC-B4E7-BE6C-3AA853571934"
	}

	var req = http.request({
		hostname: "alpage.inria.fr",
		path: "/alpes/parser.pl",
		method: "POST",
		headers: headers
	});

	req.on("response", function(res){
		var data = "";

		res.on("error", function(err){
			self.deferred.reject(err);
		});

		res.on("data", function(chunk){
			//convert string from ISO-8859-1 to UTF-8 to preserve latin characters
			data += iconvIsoUtf.convert(chunk).toString();
		});

		res.on("end", function(){
			if( !data.length && self.attempts < self.maxAttempts){
				return self._post();
			}
			if( self.attempts >= self.maxAttempts ){
				return self.deferred.reject(new Error("Couldn't parse: " + self.sentence));
			}

			parseXml(data, function(err, result){
				if( err ){ return self.deferred.reject(err); }
				try {
					var tree = new ParsedTree(result);
				} catch( err ){
					console.log(self.sentence);
					console.log(data);
					console.log(err.stack);
				}

				self.deferred.resolve(tree);
				self.attempts = 0;
			});
		});

	});

	var postData = "------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"grammar\"\r\n\r\n\
frmgtelr\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"forest\"\r\n\r\n\
passage\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"view\"\r\n\r\n\
none\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"disambiguate\"\r\n\r\
\nyes\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"sentence\"\r\n\r\n"
+ self.sentence + "\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"history\"\r\n\r\n<none>\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"hidden\"\r\n\r\n<none>\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"filename\"; filename=\"\"\r\nContent-Type: application/octet-stream\r\n\r\n\r\n------WebKitFormBoundary\
29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"Action\"\r\n\r\nSubmit\r\n------WebKitFormBoundary29\
zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\nsave_history\r\n------WebKitFormBou\
ndary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\ndisambiguate\r\n------WebKitF\
ormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\nexamples\r\n------WebKit\
FormBoundary29zFhZa4iaQlBZMu--\r\n";



	req.write(postData);

	req.end();
}

module.exports = Alpage;