var http = require('http'),
	Q = require('q'),
	parseXml = require('xml2js').parseString,
	iconvIsoUtf = new require('iconv').Iconv('latin1', 'utf8'),
	ParsedTree = require('./tree.js'),
	Kirby = require('kirby'),
	EventEmitter = require('events').EventEmitter;

var kirby = new Kirby({
	user: "boniface",
	database: "kirby",
	password: "blabla",
	host: "localhost"
});

var Alpage = function(sentence, maxAttempts){
	this.sentence = sentence,
	this.attempts = 0,
	this.maxAttempts = maxAttempts || 2;

	var self = this;

	kirby.swallow(this.parse, this)
		.then(function(parse){
			self.parse = parse;
			self.emit("ready");
		});
}

Alpage.prototype.__proto__ = EventEmitter.prototype;

Alpage.prototype.parse = function parse(){
	var deferred = Q.defer();
	this._post(deferred);
	return deferred.promise;
}

Alpage.prototype._post = function(deferred){
	var self = this;
	this.attempts += 1;
	console.log("Attempts: " + this.attempts);

	var headers = {
		Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
		"Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary29zFhZa4iaQlBZMu",
		Origin: "http://alpage.inria.fr",
		Referer: "http://alpage.inria.fr/parserdemo",
		"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.104 Safari/537.36",
		"X-DevTools-Emulate-Network-Conditions-Client-Id": "78E6DC86-CCCC-B4E7-BE6C-3AA853571934"
	}

	var req = http.request({
		hostname: "alpage.inria.fr",
		path: "/alpes/parser.pl",
		method: "POST",
		headers: headers
	});

	req.on("response", function(res){
		var data = "";

		res.on("error", function(err){
			deferred.reject(err);
		});

		res.on("data", function(chunk){
			//convert string from ISO-8859-1 to UTF-8 to preserve latin characters
			data += iconvIsoUtf.convert(chunk).toString();
		});

		res.on("end", function(){
			if( !data.length && self.attempts < self.maxAttempts){
				return self._post(deferred);
			}
			if( self.attempts >= self.maxAttempts ){
				return deferred.reject(new Error("Couldn't parse: " + self.sentence));
			}

			parseXml(data, function(err, result){
				if( err ){ return deferred.reject(err); }
				try {
					var tree = new ParsedTree(result);
				} catch( err ){
					console.log(self.sentence);
					console.log(data);
					console.log(err.stack);
				}

				deferred.resolve(tree);
				self.attempts = 0;
			});
		});

	});

	var postData = "------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"grammar\"\r\n\r\n\
frmgtelr\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"forest\"\r\n\r\n\
passage\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"view\"\r\n\r\n\
none\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"disambiguate\"\r\n\r\
\nyes\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"sentence\"\r\n\r\n"
+ self.sentence + "\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"history\"\r\n\r\n<none>\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"hidden\"\r\n\r\n<none>\r\n------WebKitFormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; \
name=\"filename\"; filename=\"\"\r\nContent-Type: application/octet-stream\r\n\r\n\r\n------WebKitFormBoundary\
29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\"Action\"\r\n\r\nSubmit\r\n------WebKitFormBoundary29\
zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\nsave_history\r\n------WebKitFormBou\
ndary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\ndisambiguate\r\n------WebKitF\
ormBoundary29zFhZa4iaQlBZMu\r\nContent-Disposition: form-data; name=\".cgifields\"\r\n\r\nexamples\r\n------WebKit\
FormBoundary29zFhZa4iaQlBZMu--\r\n";



	req.write(postData);

	req.end();
}

module.exports = Alpage;