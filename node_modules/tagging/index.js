var pgHelper = require('pg-helper'),
	EventEmitter = require('events').EventEmitter,
	util = require('util'),
	chalk = require('chalk'),
	util = require('util'),
	Q = require('q'),
	SummaryTool = require('node-summary');

var pg = new pgHelper({
	user: "boniface",
	database: "boniface",
	password: "blabla",
	host: "localhost"
});

var CLI = function(){
	process.stdin.setEncoding('utf8');
	this.callbacks = {
		'speeches': this.speechCallback,
		'sentences': this.sentenceCallback
	}

	this.choice();
}

var informationMap = {
	u: 'useless',
	p: 'positive',
	n: 'negative',
	m: 'moderate'
}

var sentenceRe = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ][^\.?!]+[^ABCDEFGHIJKLMNOPQRSTUVWXYZ][\.?!]/g;

var sentenceSelect = function(text){
	return text.match(sentenceRe).filter(function(sentence){
		return sentence.match('[^\w]proposition[^\w]') || sentence.match('[^\w]texte[^\w]') || sentence.match('[^\w]projet[^\w]')
			|| sentence.match('[^\w]vote[^\w]');
	});
}

CLI.prototype.rating = function(){
	var self = this;

	// sentenceSelect(self.current.speech).forEach(function(sentence){
	// 	console.log(chalk.red(sentence));
	// });

	
	console.log(chalk.yellow(util.format("Section: %s", self.current.debate_section)));
	console.log(chalk.blue("Is this speech positive ('p'), moderate ('m') or negative ('n')?"));

	process.stdin.on('readable', function() {
	  var answer = process.stdin.read().replace(/\n/g, "");

	  if( !answer.length ){ return; }

	  if ( ['p', 'n', 'm'].indexOf(answer) == -1 ) {
	    process.stdout.write("Sentence's information must be 'p', 'm' or 'n'");
	  } else {
	  	self.current.rating = informationMap[answer];
	  	process.stdin.removeAllListeners();
	  	cli.writeRatingToDb();
	    self.cursor.next()
	  		.then(function(rows){
	  			self.callbacks[self.choice].call(self, rows);
	  		});
	  }
	})
}

CLI.prototype.writeRatingToDb = function(){
	pg.queryPromise("UPDATE speech SET rating = " + pg.dollarize(this.current.rating) +
		" WHERE _id = " + this.current._id)
		.catch(function(err){
			console.log(err.stack);
		});
	this.current.rating = undefined;
}

CLI.prototype.information = function(){
	console.log(chalk.blue("Is this sentence useless ('u'), positive ('p') or negative ('n')?"));
	var self = this;

	process.stdin.on('readable', function() {
	  var answer = process.stdin.read().replace(/\n/g, "");

	  if( !answer.length ){ return; }

	  if ( ['u', 'p', 'n'].indexOf(answer) == -1 ) {
	    process.stdout.write("Sentence's information must be 'u', 'p' or 'n'");
	  } else {
	  	self.current.information = informationMap[answer];
	  	process.stdin.removeAllListeners();
	  	cli.writeInfoToDb();
	    self.cursor.next()
	  		.then(function(rows){
	  			self.callbacks[self.choice].call(self, rows);
	  		});
	  }
	})
}

CLI.prototype.writeInfoToDb = function(){
	pg.queryPromise("UPDATE corpus SET information = " + pg.dollarize(this.current.information) +
		" WHERE _id = " + this.current._id)
		.catch(function(err){
			console.log(err.stack);
		});
	this.current.information = undefined;
}

CLI.prototype.choice = function(){
	console.log(chalk.blue("Do you want to tag speeches('speeches') or ('sentences') ?"));
	var self = this;

	process.stdin.on('readable', function() {
	  var answer = process.stdin.read();

	  if( !answer || !(answer = answer.replace(/\n/g, "")) ){ return; }

	  if ( ['sentences', 'speeches'].indexOf(answer) == -1 ) {
	    process.stdout.write("Choice must be: 'sentences' or 'speeches'\n");
	  } else {
	  	self.choice = answer;
	  	process.stdin.removeAllListeners();
	  	self.cursor = new pg.Cursor(queryMap[self.choice]);
	    self.cursor.next()
	  		.then(function(rows){
	  			self.callbacks[self.choice].call(self, rows);
	  		});
	  }
	})
}

var queryMap = {
	'sentences': "SELECT _id, sentence, lemma_sentence FROM corpus WHERE information = $$useless$$ ORDER BY random()",
	'speeches': "SELECT _id, speech, debate_section FROM speech WHERE \
debate_section = $$discussions$$ AND rating IS NULL ORDER BY random()"
}

CLI.prototype.sentenceCallback = function(rows){
	console.log("\n");
	console.log(chalk.red(rows[0].sentence));
	this.current = rows[0];

	this.information();
}

CLI.prototype.speechCallback = function(rows){
	console.log("\n");
	console.log(chalk.grey(rows[0].speech));
	var summary = SummaryTool.getSortedSentences(rows[0].speech, 6, function(err, summary){
		console.log(chalk.red(summary));
	})
	this.current = rows[0];

	this.rating();
}

var cli = new CLI();


