var rabbit = require('amqplib').connect('amqp://localhost'),
	EventEmitter = require('events').EventEmitter;

/**
 * Initialize a new `Server` with the given `id`.
 *
 * @param {String} id
 * @param {Function} fn
 * @api public
 */


var Server = function(id, fn){
	this.id = id,
	this.fn = fn,
	this.connected = false;

	var self = this;

	self.once("connected", function(){
		self.connected = true;
	});

	rabbit.then(function(conn){
		conn.createChannel()
			.then(function(channel){
				self.channel = channel;
				channel.assertQueue(id);
				channel.assertQueue(self.callbackQueue);
				self._consume();
				self.emit("connected");
			});
	});
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

Server.prototype.__proto__ = EventEmitter.prototype;

Server.prototype._consume = function(){
	var self = this;
	this.channel.consume(this.id, function(msg){
		try {
			var result = JSON.stringify(self.fn(JSON.parse(msg.content.toString())));
		} catch (err) {
			var result = new Error("Invalid fn / args combination: " + err.message);
		}
		
		self.channel.publish('', msg.properties.replyTo, new Buffer(result), {
			messageId: msg.properties.messageId
		});
		self.channel.ack(msg);
	});
}

module.exports = Server;