var rabbit = require('amqplib').connect('amqp://localhost'),
	EventEmitter = require('events').EventEmitter,
	Q = require('q');

/**
 * Initialize a new `Client` with the given `id`.
 *
 * @param {String} id
 * @api public
 */

var Client = function(id){
	this.id = id,
	this.callbackQueue = id + "_callback",
	this.nextMessageId = 0,
	this.calls = [],
	this.connected = false;

	var self = this;

	self.once("connected", function(){
		self.connected = true;
	});

	rabbit.then(function(conn){
		conn.createChannel()
			.then(function(channel){
				self.channel = channel;
				channel.assertQueue(self.id, {durable: false});
				channel.assertQueue(self.callbackQueue);
				self._consume();
				self.emit("connected");
			});
	});

}

/**
 * Inherit from `EventEmitter.prototype`.
 */

Client.prototype.__proto__ = EventEmitter.prototype;

/**
 * Feed job to rabbit mq
 *
 * @param {Object} data
 * @api public
 */

Client.prototype.call = function(data){
	var deferred = Q.defer(),
		callId = this._genId();

	try {
		var jsonData = JSON.stringify(data);
	} catch (err) {
		return deferred.reject(err);
	}
	
	this.channel.publish('', this.id, new Buffer(JSON.stringify(data)), {
		replyTo: this.callbackQueue,
		messageId: callId
	});

	this.calls[callId] = deferred;

	return deferred.promise;
}

/**
 * Start the consumption process for rpc response
 *
 * @api private
 */

Client.prototype._consume = function(){
	var self = this;

	this.channel.consume(this.callbackQueue, function(msg){

		if( !self.calls[msg.properties.messageId] ){
			console.dir(msg.properties);	
			self.channel.ack(msg);
			return console.log("rabbit-rpc: consumed non issued call");
		}

		try {
			var result = JSON.parse(msg.content.toString())
		} catch (err) {
			self.channel.ack(msg);
			return self.calls[msg.properties.messageId].reject(err);
		}

		self.calls[msg.properties.messageId].resolve(result);
		self.channel.ack(msg);
	});
}

/**
 * Generate a new call id
 *
 * @api private
 */

Client.prototype._genId = function(){
	this.nextMessageId++;
	return this.nextMessageId.toString();
}

module.exports = exports = Client;