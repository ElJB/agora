var pgHelper = require('pg-helper'),
	EventEmitter = require('events').EventEmitter,
	util = require('util'),
	chalk = require('chalk'),
	ml = require('machine_learning'),
	BagOfWords = require('./bagOfWords.js'),
	Q = require('q');

var pg = new pgHelper({
	user: "boniface",
	database: "boniface",
	password: "blabla",
	host: "localhost"
});

var CLI = function(){
	process.stdin.setEncoding('utf8');

}


CLI.prototype.relevance = function(){
	console.log(chalk.blue("Is this sentence relevant? (0 - 5)"));
	console.log(chalk.grey("Current model suggestion: " + Object.keys(dtRelevance.classify(bow.convert(this.current.lemma_sentence)))[0]));
	var self = this;

	process.stdin.on('readable', function() {
	  var answer = process.stdin.read();

	  if( !answer.length || answer.match(/^\n*$/) ){ return; }
	  answer = Number(answer);

	  if ( Number.isNaN(answer) || answer < 0 || answer > 5 ) {
	    process.stdout.write("Sentence's relevance must be a number from 0 to 5\n");
	  } else {
	  	self.current.relevance = answer;
	  	process.stdin.removeAllListeners();
	    cli.sentiment();
	  }	  
	});

}

CLI.prototype.sentiment = function(){

	console.log(chalk.green("Is this sentence favorable? (0 - 10)"));
	console.log(chalk.grey("Current model suggestion: " + Object.keys(dtSentiment.classify(bow.convert(this.current.lemma_sentence)))[0]));
	var self = this;

	process.stdin.on('readable', function() {
	  var answer = process.stdin.read();

	  if( !answer.length || answer.match(/^\n*$/) ){ return; }
	  answer = Number(answer);

	  if ( Number.isNaN(answer) || answer < 0 || answer > 10 ) {
	    process.stdout.write("Sentence's sentiment must be a number from 0 to 10");
	  } else {
	  	self.current.sentiment = answer;
	  	process.stdin.removeAllListeners();
	  	cli.writeToDb();
	    cursor.next()
	  		.then(callback);
	  }

	  
	});

}

CLI.prototype.writeToDb = function(){
	pg.queryPromise("UPDATE corpus SET relevance = " + this.current.relevance +
		", sentiment = " + this.current.sentiment + " WHERE _id = " + this.current._id)
		.catch(function(err){
			console.log(err.stack);
		});
	this.current.relevance = undefined;
	this.current.sentiment = undefined;
}

var trainDecisionTree = function(sqlResult){
	return Q.promise(function(resolve, reject, notify){

		try {
			bow = new BagOfWords(function(sentence){ return sentence.split(" ")});

			var sentences = bow.init(sqlResult.rows.map(function(row){
				return row.lemma_sentence;
			}));

			var result = sqlResult.rows.map(function(row){
				return row.sentiment;
			});

			dtSentiment = new ml.DecisionTree({
			    data : sentences,
			    result : result
			});

			dtSentiment.build();

			var result = sqlResult.rows.map(function(row){
				return row.relevance;
			});

			dtRelevance = new ml.DecisionTree({
			    data : sentences,
			    result : result
			});

			dtRelevance.build();

			resolve();

		} catch( err ){ reject(err) }
		
	});
	
}

var cursor = new pg.Cursor("SELECT _id, sentence, lemma_sentence FROM corpus WHERE sentiment IS NULL ORDER BY random()");

var cli = new CLI(),
	dtRelevance,
	dtSentiment,
	bow;

var callback = function(rows){
	console.log("\n");
	console.log(chalk.red(rows[0].sentence));
	cli.current = rows[0];

	cli.relevance();
}

pg.queryPromise("SELECT lemma_sentence, relevance, sentiment FROM corpus WHERE sentiment IS NOT NULL")
	.then(trainDecisionTree)
	.then(function(){
		cursor.next()
			.then(callback);
	})
	.catch(function(err){
		console.log(err.stack);
	});

