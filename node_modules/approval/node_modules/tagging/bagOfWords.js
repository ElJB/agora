/*
Takes an array of sentences and returns
their representation as bag of words.
*/

var Set = require('simplesets').Set;


var BagOfWords = function(tokenizer){
	this.vocabulary = new Set();
	this.tokenizer = tokenizer;

}

var stopWords = [ 'ce',
  'un',
  'en',
  'de',
  'le',
  'son',
  'par',
  'à',
  'cln',
  'qui',
  'lui',
  'cld',
  'Uw',
  'cla',
  'clr',
  'uw',
  'ion',
  'sur',
  'est',
  'nom',
  'au',
  'du',
  'clg',
  'dès',
  'cll',
  'une',
  'a',
  'où?',
  'moi',
  'la',
  'là' ];

BagOfWords.prototype.init = function(sentences){
	var self = this;

	sentences.forEach(function(sentence){
		self.tokenizer(sentence).forEach(function(word){
			self.vocabulary.add(word);
		});
	});

	this.vocabulary = this.vocabulary.array();

	this.vocabulary = this.vocabulary.filter(function(word){
		return stopWords.indexOf(word) == -1;
	});

	return sentences.map(this.convert, this);
}

BagOfWords.prototype.convert = function(sentence){
	var bag = [];
	this.vocabulary.forEach(function(word){
		var match = sentence.match(new RegExp(word, 'g'));
		bag.push(match ? match.length : 0);
	});
	return bag;
}

module.exports = BagOfWords;