# -*- coding: latin1 -*-

import psycopg2
from sklearn.ensemble import RandomForestClassifier
from sklearn.cross_validation import StratifiedKFold
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np

conn = psycopg2.connect("dbname=boniface user=boniface password=blabla")

cur = conn.cursor()

cur.execute("SELECT rated_sentences, positive, negative, useless, rating FROM speech WHERE rating IS NOT NULL")

def classificationError(b, a):
	assert len(a) == len(b)
	result = {}
	for i in range(len(a)):
		key = str(a[i]) + " => " + str(b[i])
		if key not in result : result[key] = 1
		else : result[key] += 1
	return result


valueMap = {
	'useless': 1,
	'positive': 2,
	'negative': 3
}

rows = cur.fetchall()
rated_sentences = np.array([row[0:4] for row in rows])
ratings = np.array([row[4] for row in rows])
del rows

classifier = RandomForestClassifier()

folds = StratifiedKFold(ratings, n_folds=3)

result = []

for train, test in folds:
	data_train = rated_sentences[train]
	result_train = ratings[train]

	data_test = rated_sentences[test]
	result_test = ratings[test]

	classifier = RandomForestClassifier()

	classifier.fit(data_train, result_train)
	print classificationError(classifier.predict(data_test), result_test)
	result.append(classifier.score(data_test, result_test))

print reduce(lambda x, y: x + y, result) / float(len(result))
