# -*- coding: latin1 -*-

import psycopg2
from sklearn.svm import SVC
from sklearn.cross_validation import StratifiedKFold
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np

conn = psycopg2.connect("dbname=boniface user=boniface password=blabla")

cur = conn.cursor()

cur.execute("SELECT lemma_sentence, relevance, sentiment, information FROM corpus WHERE information IS NOT NULL")

def classificationError(b, a):
	assert len(a) == len(b)
	result = {}
	for i in range(len(a)):
		key = str(a[i]) + " => " + str(b[i])
		if key not in result : result[key] = 1
		else : result[key] += 1
	return result


valueMap = {
	'useless': 1,
	'positive': 2,
	'negative': 3
}

rows = cur.fetchall()
sentences = np.array([row[0] for row in rows])
information = np.array([row[3] for row in rows])
del rows

folds = StratifiedKFold(information, n_folds=3)

result = []


for train, test in folds:
	data_train = sentences[train]
	result_train = information[train]

	data_test = sentences[test]
	result_test = information[test]

	vectorizer = TfidfVectorizer(binary=True, norm=False, use_idf=False)
	classifier = SVC(kernel='rbf', C=100000, gamma=0, class_weight={'positive': 0.33, 'useless': 0.33, 'negative': 0.33})

	data_train = vectorizer.fit_transform(data_train)
	data_test = vectorizer.transform(data_test)

	classifier.fit(data_train.toarray(), result_train)

	print classificationError(classifier.predict(data_test.toarray()), result_test)
	result.append(classifier.score(data_test.toarray(), result_test))

print reduce(lambda x, y: x + y, result) / float(len(result))
