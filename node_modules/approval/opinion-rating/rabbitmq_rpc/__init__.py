# -*- coding: latin1 -*-

import pika
import json
import uuid

class RpcServer:
	def __init__(self, id, fn):
		self.id = id
		self.fn = fn
		self.connection = pika.BlockingConnection(pika.ConnectionParameters(
        host='localhost'))

		self.channel = self.connection.channel()

		self.channel.queue_declare(queue=id)

		self.channel.basic_qos(prefetch_count=1)
		self.channel.basic_consume(self.on_request, queue=id)

		self.channel.start_consuming()

	def on_request(self, ch, method, props, body):
	    body = json.loads(body)

	    response = self.fn(body)

	    ch.basic_publish(exchange='',
	                     routing_key=props.reply_to,
	                     properties=pika.BasicProperties(correlation_id = \
	                                                     props.correlation_id,
	                                                     message_id = props.message_id),
	                     body=json.dumps(response))

	    ch.basic_ack(delivery_tag= method.delivery_tag)

class RpcClient:
	def __init__(self, id):
		self.id = id
		self.connection = pika.BlockingConnection(pika.ConnectionParameters(
		host='localhost'))

		self.channel = self.connection.channel()

		result = self.channel.queue_declare(queue=id + "_callback", durable=True)
		self.channel.queue_purge(queue=id + "_callback")
		self.channel.queue_purge(queue=id)
		self.callback_queue = result.method.queue

		self.channel.basic_consume(self.on_response, queue=self.callback_queue)

	def on_response(self, ch, method, props, body):
		if self.corr_id == props.correlation_id:
			print body
			self.response = body
		ch.basic_ack(delivery_tag=method.delivery_tag)

	def call(self, args):
		self.response = None
		self.corr_id = str(uuid.uuid4())
		self.channel.basic_publish(exchange='',
									routing_key=self.id,
									properties=pika.BasicProperties(
										reply_to = self.callback_queue,
										correlation_id = self.corr_id,
										),
									body=json.dumps(args))
		while self.response is None:
			self.connection.process_data_events()
		return json.loads(self.response)


__all__ = ["RpcServer", "RpcClient"]