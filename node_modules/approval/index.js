var Alpage = require('alpage-connector'),
	Q = require('q'),
	log = require('./log.js');

var sentenceRe = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ][^\.?!]+[^ABCDEFGHIJKLMNOPQRSTUVWXYZ][\.?!]/g;

var treeToLemm = function(tree){
	return tree.groups.map(function(group){
		return group.words.map(function(word){
			return word.lemma;
		}).reduce(function(a, b){
			return a + " " + b;
		});
	}).reduce(function(a, b){
		return a + " " + b;
	});
}

var parseSentences = function(sentences){
	console.log(sentences[0]);
	var alpage = new Alpage(sentences.splice(0, 1));

	alpage.parse().then(function(result){
		console.log(treeToLemm(result));
	}).catch(log)
	.fin(function(){
		if( sentences.length ){
			parseSentences(sentences);
		}
	});
}

module.exports = function(speech){
	var sentences = speech.match(sentenceRe).filter(function(sentence){
		return sentence.match(' proposition') || sentence.match(' texte') || sentence.match(' projet') || sentence.match(' loi');
	});

	sentences.forEach(log);



	parseSentences(sentences);

}
