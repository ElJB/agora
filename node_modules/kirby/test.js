var Kirby = require('./kirby.js'),
	assert = require('assert'),
	Q = require('q');

function log(err){
	console.log(err.stack);
}

var kirby = new Kirby({
	user: "boniface",
	database: "kirby",
	password: "blabla",
	host: "localhost"
});

function square(n){
	return n*n;
}

function promiseSquare(n){
	var deferred = Q.defer();

	process.nextTick(function(){
		deferred.resolve(n*n);
	});	

	return deferred.promise;
}

var called = false;
function oneCallSquare(n){
	assert(!called);

	called = true;

	return n*n
}

function Squarer(n){
	this.n = n;
}

Squarer.prototype.squaring = function squaring(){
	return this.n * this.n;
}

var squarer6 = new Squarer(6);

function test1(){
	var digested = kirby.swallow(square);

	digested(3)
		.then(function(result){
			assert.equal(result, 9);

			test2();
		}).catch(log);

}

function test2(){
	var digested = kirby.swallow(promiseSquare);

	digested(4)
		.then(function(result){
			assert.equal(result, 16);

			test3();
		}).catch(log);
}

function test3(){
	var digested = kirby.swallow(oneCallSquare);

	digested(5)
		.then(function(result){
			assert.equal(result, 25);

			test4();
		}).catch(log)
}

function test4(){
	var digested = kirby.swallow(oneCallSquare);

	digested(5)
		.then(function(result){
			assert.equal(result, 25);

			test5();
		}).catch(log)
}

var squaring6;
function test5(){
	var digested = kirby.swallow(squarer6.squaring)

	squaring6 = digested;
	digested.apply(squarer6)
		.then(function(result){
			assert.equal(result, 36);		

			test6();
		}).catch(log);
}

function test6(){
	squaring6.apply(squarer6)
		.then(function(result){
			assert.equal(result, 36);		

			console.log("kirby tests: OK");
		}).catch(log)
		.fin(clear);
}

function clear(){
	kirby.clear("square");
	kirby.clear("promiseSquare");
	kirby.clear("oneCallSquare");
	kirby.clear("squaring");
}

test1();

kirby.on("err", log);